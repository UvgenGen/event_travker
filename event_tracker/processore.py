import logging
import json

from track.backends import BaseBackend

from gamma_bridge import client, converter


TRACKING_LOGGER = logging.getLogger('tracking')


class EventTrackerProcessor(BaseBackend):
    """
    Is responsible for capturing, transforming and sending all the event tracking logs
    generated by Open edX platform.
    It is used as an addition to the event tracking pipeline in the event_tracking app
    by Open edX.
    """

    def __call__(self, event):
        """
        Handles the transformation and delivery of an event.
        
        Delivers the event to the external gamification backend
        aka GAMMA.
        @params:
        event: raw event from edX event tracking pipeline
        """
        try:
            g_statement = converter.to_gamma(event)
            if g_statement is not None:
                client.publisher.publish_event(g_statement.data)
            return event          
        except Exception as ex:
            TRACKING_LOGGER.exception('{} {}'.format(event, ex.args))

    def send(self, event):
        """
        Implements the abstract send method in track.backends.BaseBackend
        @params:
        event: (dict) raw event from edX event tracking pipeline:
        """
        if not event['event_type'].startswith('/'):
            TRACKING_LOGGER.info(self.__call__(event))
        else:
            TRACKING_LOGGER.info(json.dumps(event))
